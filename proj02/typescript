Script started on Mon 18 Feb 2019 05:24:03 PM EST
djv78@gold10:~/112/proj02$ ls
array.cpp      array.h		ArrayTester.h  main.cpp
arrayData.txt  ArrayTester.cpp	Debug	       typescript
djv78@gold10:~/112/proj02$ cat main.cpp 
/* main.cpp drives the testing of the array operations.
 * Student: Duncan Van Keulen
 * Date: 15 February 2019
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ArrayTester.h"

int main() {
	ArrayTester at;
	at.runTests();
}
djv78@gold10:~/112/proj02$ cat array     ArrayTester.cpp   h
/*ArrayTester.h provides a class to test C-style array operations.
 * Student: Duncan Van Keulen
 * Date: 15 February 2019
 * By: Joel Adams, for CS 112 at Calvin College.
 */
#ifndef ARRAY_TESTER_H_
#define ARRAY_TESTER_H_

#include "array.h"  // the functions we are testing
#include <iostream>
#include <cassert>
using namespace std;

class ArrayTester
{
public:
	ArrayTester();
	virtual ~ArrayTester();
	void runTests();
	void setup();
	void cleanup();
	void testInitialize();
	void testPrint();
	void testAverage();
	void testSum();
	void testResize();
	void testConcat();
	void testFill();
	void testRead();
private:
	double * a1;
	double * a2;
	double * a3;
};

#endif /*ARRAY_TESTER_H_*/
djv78@gold10:~/112/proj02$ cat Arrat yTester.cpp
/* ArrayTester.cpp defines the methods to test C-style array operations.
 * Student: Duncan Van Keulen
 * Date: 15 February 2019
 * By: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ArrayTester.h"
#include <fstream>
#include <iostream>
#include <cassert>
#include <assert.h>
using namespace std;

ArrayTester::ArrayTester() {
	a1 = a2 = a3 = NULL;
}

ArrayTester::~ArrayTester() {
        cleanup();
}

void ArrayTester::cleanup() {
	delete [] a1; a1 = NULL;
	delete [] a2; a2 = NULL;
	delete [] a3; a3 = NULL;
}

void ArrayTester::runTests() {
	testInitialize();
	testPrint();
	testAverage();
	testSum();
	testResize();
	testConcat();
	testFill();
	testRead();
	cout << "All tests passed!" << endl;
}

void ArrayTester::setup() {
	a1 = new double[3];
	for (int i = 0; i < 3; i++) {
		a1[i] = i+1;
	}
	a2 = new double[4];
	for (int i = 0; i < 4; i++) {
		a2[i] = i+2;
	}
	a3 = new double[5];
	for (int i = 0; i < 5; i++) {
		a3[i] = i+3;
	}
}

void ArrayTester::testInitialize()  {
	cout << "Testing initialize()... " << flush;
	setup();
	initialize(a1, 3);
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	initialize(a2, 4);
	for (int i = 0; i < 4; i++) {
		assert( a2[i] == i+1 );
	}
	initialize(a3, 5);
	for (int i = 0; i < 5; i++) {
		assert( a3[i] == i+1 );
	}
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testPrint() {
	cout << "Testing print()... " << flush;
	setup();
	cout << "\nExpecting 3 values: 1, 2, 3..." << endl;
	print(a1, 3);
	cout << "\nExpecting 4 values: 2, 3, 4, 5..." << endl;
	print(a2, 4);
	cout << "\nExpecting 5 values: 3, 4, 5, 6, 7..." << endl;
	print(a3, 5);
        cleanup();
	cout << "\nPassed!" << endl << endl;
}

void ArrayTester::testAverage() {
	cout << "Testing average()... " << flush;
	setup();
	assert( average(a1, 3) == 2  );
	cout << " 0 " << flush;
	assert( average(a2, 4) == 3.5 );
	cout << " 1 " << flush;
	assert( average(a3, 5) == 5 );
        cleanup();
    cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void ArrayTester::testSum() {
	cout << "Testing sum()... " << flush;
	setup();
	assert( sum(a1, 3) == 6 );
	cout << " 0 " << flush;
	assert( sum(a2, 4) == 14 );
	cout << " 1 " << flush;
	assert( sum(a3, 5) == 25 );
        cleanup();
    cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void ArrayTester::testResize() {
	cout << "Testing resize()... " << flush;
	setup();
	double * temp1 = a1;
	resize(a1, 3, 7);
	assert( a1 != temp1 );
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	for (int i = 3; i < 7; i++) {
		assert( a1[i] == 0 );
	}

	double *temp3 = a3;
	resize(a3, 5, 3);
	assert( temp3 != a3 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+3 );
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testConcat() {
	cout << "Testing concat()... " << flush;
	setup();
	int size1 = 3, size2 = 4, size3 = 5;
	double *temp1 = a1;
	double *temp2 = a2;
	double *temp3 = a3;
	concat(a1, size1, a2, size2, a3, size3);
	assert( temp1 == a1 );
	assert( temp2 == a2 );
        /* the next assertion assumes that the new array's base
         *  address is different from the old array's base address,
         *  which may not be true. If concat() seems to be right,
         *  and passes all assertions except this one, you may
         *  comment out this assertion.
         */
//	assert( temp3 != a3 );
	assert( size1 == 3 );
	assert( size2 == 4 );
	assert( size3 == 7 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+1 );
	}
	int j = 2;
	for (int i = 3; i < 7; i++) {
		assert( a3[i] == j );
		j++;
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}


void ArrayTester::testFill() {
	cout << "Testing fill()... " << flush;
	setup();
	int size1 = 3;
	double *temp1 = a1;
	fill("arrayData.txt", a1, size1);
	assert( a1 != temp1 );
	assert( size1 == 6);
	for (int i = 0; i < size1; i++) {
		assert( a1[i] == i+10 );   // values should be 10, 11, 12, 13, 14, 15
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testRead() {
	cout << "Testing read()... " << flush;
	double* a4 = new double[6];
	ifstream fin("arrayData.txt");
	assert( fin.is_open() );
	string firstLine, secondLine;
	getline(fin, firstLine);         // skip past the '6' that's there for fill()...
	getline(fin, secondLine);        // skip past the '10'
	read(fin, a4, 5);                // read 5 values instead of 6
	for (int i = 0; i < 5; i++) {    // check what we got:
		assert( a4[i] == i+11 ); //  values should be 11, 12, 13, 14, 15,
	}                                //   so test-values differ from fill()
        delete [] a4;
	cout << "Passed!" << endl;
}

djv78@gold10:~/112/proj02$ cat arrayt .h
/* array.h declares "C style" array operations.
 * Name: Duncan Van Keulen
 * Date: 17 February 2019
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#include <iostream>
#include <cassert>
#include <string>
using namespace std;

void initialize(double *a, unsigned size);

void print(double *a, unsigned size);

double average(double *a, unsigned size);

// project functions
double sum(double *a, unsigned size);
void read(istream& in, double *a, unsigned size);
void fill(const string& fileName, double *&a, int &numValues);
void resize(double *&a, unsigned oldSize, unsigned newSize);
void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3);
djv78@gold10:~/112/proj02$ cat array.cpp
/* array.cpp defines "C style" array operations
 * Name: Duncan Van Keulen
 * Date: 12 February 2019
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#include "array.h"
#include <fstream>
#include <iostream>
#include <string>
using namespace std;

/*
 * precondition: a is an array of size size
 * @param double *a: The pointer to an array of doubles
 * @param unsigned size: The size of the array
 * postcondition: array will be initialized to values 0 - size
 */
void initialize(double *a, unsigned size) {
	int val = 0;
	for (unsigned i = 0; i < size; i++) {
		val = i+1;
		a[i] = val;
	}
}
/*
 * precondition: a is an array of size size
 * @param double *a: The pointer to an array of doubles
 * @param unsigned size: The size of the array
 * postcondition: the contents of the array will be
 * 							printed to the terminal
 */
void print(double *a, unsigned size) {
	for (unsigned i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}

/*
 * precondition: a is an array of size size
 * @param double *a: The pointer to an array of doubles
 * @param unsigned size: The size of the array
 * returns: a double of the average of the values in the array
 */
double average(double *a, unsigned size) {
	double total = 0;
	for (unsigned i = 0; i < size; i++) {
		total += *a;
		a++;
	}
	return total / size;
}

/*
 * precondition: a is an array of size size
 * @param double *a: The pointer to an array of doubles
 * @param unsigned size: The size of the array
 * returns: a double of the sum of the values in the array
 */
double sum(double *a, unsigned size) {
	double total = 0;
	for (unsigned i = 0; i < size; i++) {
		total += *a;
		a++;
	}
	return total;
}

/*
 * precondition: a is an array of size size
 * @param istream& in: an istream that will be used to read
 * 					   the values into a
 * @param double *a: The pointer to an array of doubles
 * @param unsigned size: The size of the array
 * returns: a double of the sum of the values in the array
 */
void read(istream& in, double *a, unsigned size) {
	for (unsigned i = 0; i < size; i++) {
		if (!(in)) { break; }
		double line;
		in >> line;
		a[i] = line;
	}
}

/*
 * precondition: a is an array of size size and there exists
 * 			     a file with name fileName containing numbers
 * @param const string& fileName: a string of the file
 * 								  containing the values
 * 								  to fill the array with
 * @param double *a: The pointer to an array of doubles
 * postcondition: array will be filled with the values in the file
 * 				  (The first value of the file will be used as the
 * 				  size of the array)
 */
void fill(const string& fileName, double *&a, int &numValues) {
	ifstream fin(fileName.c_str());
	assert( fin.is_open() );

	fin >> numValues;
	delete [] a;
	a = new double[numValues];

	for (int i = 0; i < numValues; i++) {
		fin >> a[i];
	}

	fin.close();
}

/*
 * precondition: a is an array of size size
 * @param double *a: The pointer to an array of doubles
 * @param unsigned oldSize: The initial size of the array when
 * 						    passed into the function
 * @param unsigned newSize: The desired new size of the array
 * postcondition: array will have new size newSize,
 * 				  if newSize was less than oldSize, array was truncated
 */
void resize(double *&a, unsigned oldSize, unsigned newSize) {
	double val = 0;
	double * newA = new double[newSize];
	if (newSize > oldSize) {
		for (unsigned i = 0; i < oldSize; i++) {
			newA[i] = *&a[i];
		}
		delete [] a;
		a = newA;
	}

	else if (newSize < oldSize) {
		for (unsigned i = 0; i < newSize; i++) {
			val = *&a[i];
			newA[i] = val;
		}
		delete [] a;
		a = newA;
	}
}

/* precondition: arrays 1, 2, and 3 are arrays with size of their
 * 										respective size variables
 * @param double *a1: an array of size...
 * @param int size1
 *
 * @param double *a2: an array of size...
 * @param int size2
 *
 * @param double *&a3: an array of size...
 * @param &size3
 *
 * postcondition: Array 3 will be a concatenation of array 1 and 2 with size
 */
void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3) {
	size3 = size1 + size2;

	double * b = new double[size3];

	for (int i = 0; i < size1; i++) {
		b[i] = a1[i];
	}

	int j = 0;
	for (int i = size1; i < size3; i++) {
		b[i] = a2[j];
		j++;
	}
	delete [] a3;
	a3 = b;
}

djv78@gold10:~/112/proj02$ cat arrayData.txt  xt 
6
10
11
12
13
14
15djv78@gold10:~/112/proj02$ make all
make: *** No rule to make target 'all'.  Stop.
djv78@gold10:~/112/proj02$ ./Debug  /proj- 02
Testing initialize()... Passed!
Testing print()... 
Expecting 3 values: 1, 2, 3...
1	2	3	
Expecting 4 values: 2, 3, 4, 5...
2	3	4	5	
Expecting 5 values: 3, 4, 5, 6, 7...
3	4	5	6	7	
Passed!

Testing average()...  0  1  2 Passed!
Testing sum()...  0  1  2 Passed!
Testing resize()... Passed!  But double-check that you deleted the old array...
Testing concat()... Passed!  But double-check that you deleted the old array...
Testing fill()... Passed!  But double-check that you deleted the old array...
Testing read()... Passed!
All tests passed!
djv78@gold10:~/112/proj02$ ^C
djv78@gold10:~/112/proj02$ exit

Script done on Mon 18 Feb 2019 05:25:47 PM EST
